// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:smartpipenetwork/models/login_model_entity.dart';
import 'package:smartpipenetwork/generated/json/login_model_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case LoginModelEntity:
			return loginModelEntityFromJson(data as LoginModelEntity, json) as T;			case LoginModelResult:
			return loginModelResultFromJson(data as LoginModelResult, json) as T;			case LoginModelResultConfig:
			return loginModelResultConfigFromJson(data as LoginModelResultConfig, json) as T;			case LoginModelResultUser:
			return loginModelResultUserFromJson(data as LoginModelResultUser, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case LoginModelEntity:
			return loginModelEntityToJson(data as LoginModelEntity);			case LoginModelResult:
			return loginModelResultToJson(data as LoginModelResult);			case LoginModelResultConfig:
			return loginModelResultConfigToJson(data as LoginModelResultConfig);			case LoginModelResultUser:
			return loginModelResultUserToJson(data as LoginModelResultUser);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'LoginModelEntity':
			return LoginModelEntity().fromJson(json);			case 'LoginModelResult':
			return LoginModelResult().fromJson(json);			case 'LoginModelResultConfig':
			return LoginModelResultConfig().fromJson(json);			case 'LoginModelResultUser':
			return LoginModelResultUser().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'LoginModelEntity':
			return List<LoginModelEntity>();			case 'LoginModelResult':
			return List<LoginModelResult>();			case 'LoginModelResultConfig':
			return List<LoginModelResultConfig>();			case 'LoginModelResultUser':
			return List<LoginModelResultUser>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}