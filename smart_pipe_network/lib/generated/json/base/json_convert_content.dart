// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:smartpipenetwork/models/undone_task_model_entity.dart';
import 'package:smartpipenetwork/generated/json/undone_task_model_entity_helper.dart';
import 'package:smartpipenetwork/models/detailes_images_entity.dart';
import 'package:smartpipenetwork/generated/json/detailes_images_entity_helper.dart';
import 'package:smartpipenetwork/models/describe_detail_entity.dart';
import 'package:smartpipenetwork/generated/json/describe_detail_entity_helper.dart';
import 'package:smartpipenetwork/models/disease_way_model_entity_entity.dart';
import 'package:smartpipenetwork/generated/json/disease_way_model_entity_entity_helper.dart';
import 'package:smartpipenetwork/models/login_model_entity.dart';
import 'package:smartpipenetwork/generated/json/login_model_entity_helper.dart';
import 'package:smartpipenetwork/models/finished_task_model_entity_entity.dart';
import 'package:smartpipenetwork/generated/json/finished_task_model_entity_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case UndoneTaskModelEntity:
			return undoneTaskModelEntityFromJson(data as UndoneTaskModelEntity, json) as T;			case UndoneTaskModelResult:
			return undoneTaskModelResultFromJson(data as UndoneTaskModelResult, json) as T;			case DetailesImagesEntity:
			return detailesImagesEntityFromJson(data as DetailesImagesEntity, json) as T;			case DetailesImagesResult:
			return detailesImagesResultFromJson(data as DetailesImagesResult, json) as T;			case DescribeDetailEntity:
			return describeDetailEntityFromJson(data as DescribeDetailEntity, json) as T;			case DescribeDetailResult:
			return describeDetailResultFromJson(data as DescribeDetailResult, json) as T;			case DescribeDetailResultDescribe:
			return describeDetailResultDescribeFromJson(data as DescribeDetailResultDescribe, json) as T;			case DiseaseWayModelEntityEntity:
			return diseaseWayModelEntityEntityFromJson(data as DiseaseWayModelEntityEntity, json) as T;			case DiseaseWayModelEntityResult:
			return diseaseWayModelEntityResultFromJson(data as DiseaseWayModelEntityResult, json) as T;			case LoginModelEntity:
			return loginModelEntityFromJson(data as LoginModelEntity, json) as T;			case LoginModelResult:
			return loginModelResultFromJson(data as LoginModelResult, json) as T;			case LoginModelResultConfig:
			return loginModelResultConfigFromJson(data as LoginModelResultConfig, json) as T;			case LoginModelResultUser:
			return loginModelResultUserFromJson(data as LoginModelResultUser, json) as T;			case FinishedTaskModelEntityEntity:
			return finishedTaskModelEntityEntityFromJson(data as FinishedTaskModelEntityEntity, json) as T;			case FinishedTaskModelEntityResult:
			return finishedTaskModelEntityResultFromJson(data as FinishedTaskModelEntityResult, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case UndoneTaskModelEntity:
			return undoneTaskModelEntityToJson(data as UndoneTaskModelEntity);			case UndoneTaskModelResult:
			return undoneTaskModelResultToJson(data as UndoneTaskModelResult);			case DetailesImagesEntity:
			return detailesImagesEntityToJson(data as DetailesImagesEntity);			case DetailesImagesResult:
			return detailesImagesResultToJson(data as DetailesImagesResult);			case DescribeDetailEntity:
			return describeDetailEntityToJson(data as DescribeDetailEntity);			case DescribeDetailResult:
			return describeDetailResultToJson(data as DescribeDetailResult);			case DescribeDetailResultDescribe:
			return describeDetailResultDescribeToJson(data as DescribeDetailResultDescribe);			case DiseaseWayModelEntityEntity:
			return diseaseWayModelEntityEntityToJson(data as DiseaseWayModelEntityEntity);			case DiseaseWayModelEntityResult:
			return diseaseWayModelEntityResultToJson(data as DiseaseWayModelEntityResult);			case LoginModelEntity:
			return loginModelEntityToJson(data as LoginModelEntity);			case LoginModelResult:
			return loginModelResultToJson(data as LoginModelResult);			case LoginModelResultConfig:
			return loginModelResultConfigToJson(data as LoginModelResultConfig);			case LoginModelResultUser:
			return loginModelResultUserToJson(data as LoginModelResultUser);			case FinishedTaskModelEntityEntity:
			return finishedTaskModelEntityEntityToJson(data as FinishedTaskModelEntityEntity);			case FinishedTaskModelEntityResult:
			return finishedTaskModelEntityResultToJson(data as FinishedTaskModelEntityResult);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'UndoneTaskModelEntity':
			return UndoneTaskModelEntity().fromJson(json);			case 'UndoneTaskModelResult':
			return UndoneTaskModelResult().fromJson(json);			case 'DetailesImagesEntity':
			return DetailesImagesEntity().fromJson(json);			case 'DetailesImagesResult':
			return DetailesImagesResult().fromJson(json);			case 'DescribeDetailEntity':
			return DescribeDetailEntity().fromJson(json);			case 'DescribeDetailResult':
			return DescribeDetailResult().fromJson(json);			case 'DescribeDetailResultDescribe':
			return DescribeDetailResultDescribe().fromJson(json);			case 'DiseaseWayModelEntityEntity':
			return DiseaseWayModelEntityEntity().fromJson(json);			case 'DiseaseWayModelEntityResult':
			return DiseaseWayModelEntityResult().fromJson(json);			case 'LoginModelEntity':
			return LoginModelEntity().fromJson(json);			case 'LoginModelResult':
			return LoginModelResult().fromJson(json);			case 'LoginModelResultConfig':
			return LoginModelResultConfig().fromJson(json);			case 'LoginModelResultUser':
			return LoginModelResultUser().fromJson(json);			case 'FinishedTaskModelEntityEntity':
			return FinishedTaskModelEntityEntity().fromJson(json);			case 'FinishedTaskModelEntityResult':
			return FinishedTaskModelEntityResult().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'UndoneTaskModelEntity':
			return List<UndoneTaskModelEntity>();			case 'UndoneTaskModelResult':
			return List<UndoneTaskModelResult>();			case 'DetailesImagesEntity':
			return List<DetailesImagesEntity>();			case 'DetailesImagesResult':
			return List<DetailesImagesResult>();			case 'DescribeDetailEntity':
			return List<DescribeDetailEntity>();			case 'DescribeDetailResult':
			return List<DescribeDetailResult>();			case 'DescribeDetailResultDescribe':
			return List<DescribeDetailResultDescribe>();			case 'DiseaseWayModelEntityEntity':
			return List<DiseaseWayModelEntityEntity>();			case 'DiseaseWayModelEntityResult':
			return List<DiseaseWayModelEntityResult>();			case 'LoginModelEntity':
			return List<LoginModelEntity>();			case 'LoginModelResult':
			return List<LoginModelResult>();			case 'LoginModelResultConfig':
			return List<LoginModelResultConfig>();			case 'LoginModelResultUser':
			return List<LoginModelResultUser>();			case 'FinishedTaskModelEntityEntity':
			return List<FinishedTaskModelEntityEntity>();			case 'FinishedTaskModelEntityResult':
			return List<FinishedTaskModelEntityResult>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}